#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to sort the array in ascending order
void sortArray(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr)/sizeof(arr[0]);

    // Forking a child process
    pid_t pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        char *args[n+2]; // +2 for program name and NULL terminator
        args[0] = "./display_reverse";
        for (int i = 0; i < n; i++) {
            args[i+1] = malloc(10); // allocating memory for string representation of integers
            sprintf(args[i+1], "%d", arr[i]);
        }
        args[n+1] = NULL; // NULL terminator
        
        // Executing the display_reverse program
        execve(args[0], args, NULL);
        fprintf(stderr, "Exec failed\n");
        return 1;
    } else {
        // Parent process
        // Wait for child to complete
        wait(NULL);

        // Sort the array
        sortArray(arr, n);

        // Display the sorted array
        printf("Sorted array: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    }

    return 0;
}
